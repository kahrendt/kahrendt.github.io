<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://kahrendt.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://kahrendt.github.io/" rel="alternate" type="text/html" /><updated>2023-03-23T19:39:13-04:00</updated><id>https://kahrendt.github.io/feed.xml</id><title type="html">Kevin Ahrendt</title><subtitle>A personal website for 3D printing, mathematics, data science, and home automation.</subtitle><author><name>Kevin Ahrendt</name></author><entry><title type="html">Approximating Dew Point in ESPHome</title><link href="https://kahrendt.github.io/approximating-dew-point" rel="alternate" type="text/html" title="Approximating Dew Point in ESPHome" /><published>2022-07-20T00:00:00-04:00</published><updated>2022-07-20T00:00:00-04:00</updated><id>https://kahrendt.github.io/approximating-dew-point</id><content type="html" xml:base="https://kahrendt.github.io/approximating-dew-point"><![CDATA[<p>A dew point is a practical measure of moisture in the air that is a good proxy for occupant comfort. It is better to determine if a space feels “muggy” than relative humidity. The dew point is the air temperature, assuming the amount of water vapor in the air remains constant, in which the relative humidity of the air would be 100%. If the temperature decreases to be less than the dew point, water will condense on surfaces <a class="citation" href="#nws-dewpoint_vs_humidity">[1]</a>. Another way to quantify the absolute quantity of moisture in the air is to use <a href="https://esphome.io/components/sensor/absolute_humidity.html">absolute humidity</a>, but it is arguably easier to interpret a dew point has the same units as a regular temperature measurement.</p>

<p>Unfortunately, cheap, readily available electronic sensors that measure dew point directly are unavailable. However, we can approximate the dew point temperature relatively quickly and accurately by knowing the relative humidity and air temperature, which many sensors make available! As a note, there are many ways to approximate the dew point. However, we will base our approximation on a calculation that uses the Magnus formula described in <a class="citation" href="#sensirion-dew_point_calculation">[2]</a>.</p>

<p>The dew point temperature \( T_{dp} \) (in \( ^\circ \text{C} \)) is approximated by</p>

\[T_{dp} \left( T, RH \right) = \frac{\lambda\left( \ln\left(\frac{RH}{100}\right) + \frac{\beta T}{\lambda+T} \right)}{\beta-\left( \ln\left(\frac{RH}{100}\right) + \frac{\beta T}{\lambda+T} \right)},\]

<p>where \( T \) is the ambient temperature in \( ^\circ \text{C} \), \( RH \) is the relative humidity (as a number between 0 and 100), \( \alpha = 6.112 \text{hPa} \), \( \beta = 17.62 \), and \( \lambda = 243.12 ^\circ \text{C} \). In our equivalent C++ implementation, we use a temporary variable of</p>

\[H(T,RH) = \ln\left(\frac{RH}{100}\right) + \frac{\beta T}{\lambda+T},\]

<p>and return the dew point in \(^\circ \text{C}\) with</p>

\[T_{dp}(H) = \frac{\lambda H}{\beta - H}.\]

<p>Since I use ESPHome to control my sensors, the ESP32 will calculate the dew point directly on the device using a template sensor. The following template sensor assumes there are separate humidity and temperature sensors with an ESPHome id of “humidity” and “temperature” respectively.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sensor:
  - platform: template
    name: "${upper_device_name} Dew Point"
    id: dewPoint
    update_interval: 30s
    device_class: temperature
    unit_of_measurement: "°C"
    accuracy_decimals: 0                                # formula is uncertain up to 0.35 degrees C = 0.63 degrees F for usual indoor temperatures
    lambda: |- 
        const float alpha = 6.112;                      // (hPa)
        const float beta = 17.62;
        const float lambda = 243.12;                    // (degrees C)

        float RH = id(humidity).raw_state;              // Relative Humidity
        float T = id(temperature).raw_state;            // Temperature in (degrees C)

        float H = log( RH/100 ) + beta*T/(lambda+T);
        return (lambda)*H/(beta - H);
</code></pre></div></div>

<h1 id="references">References</h1>
<ol class="bibliography"><li><span id="nws-dewpoint_vs_humidity">1. Service USNW Dew point vs. Humidity. Available at: https://www.weather.gov/arx/why_dewpoint_vs_humidity.</span></li>
<li><span id="sensirion-dew_point_calculation">2. Application Note: Dew-Point Calculation Sensirion AG.</span></li></ol>]]></content><author><name>Kevin Ahrendt</name></author><category term="programming" /><category term="smart-home" /><category term="esphome" /><category term="programming" /><category term="mathematics" /><summary type="html"><![CDATA[A dew point is a practical measure of moisture in the air that is a good proxy for occupant comfort. It is better to determine if a space feels “muggy” than relative humidity. The dew point is the air temperature, assuming the amount of water vapor in the air remains constant, in which the relative humidity of the air would be 100%. If the temperature decreases to be less than the dew point, water will condense on surfaces [2]. Another way to quantify the absolute quantity of moisture in the air is to use absolute humidity, but it is arguably easier to interpret a dew point has the same units as a regular temperature measurement.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://kahrendt.github.io/thermometer-water.png" /><media:content medium="image" url="https://kahrendt.github.io/thermometer-water.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Hyperbolic Paraboloid Printed Surface Classroom Activity</title><link href="https://kahrendt.github.io/hyperbolic_paraboloid_activity" rel="alternate" type="text/html" title="Hyperbolic Paraboloid Printed Surface Classroom Activity" /><published>2019-08-19T00:00:00-04:00</published><updated>2019-08-19T00:00:00-04:00</updated><id>https://kahrendt.github.io/hyperbolic_paraboloid_activity</id><content type="html" xml:base="https://kahrendt.github.io/hyperbolic_paraboloid_activity"><![CDATA[<h2 id="description">Description:</h2>
<p>These are models for several quadric surfaces that are useful for Multivariable Calculus classes. The surfaces include raised bumps representing traces. The models allow students to make the connection between the abstract formula/2D pictures to the actual surface in 3D. I have also inclued an in-classroom activity that I used when teaching Multivariable Calculus. Each group was given a printed version of the hyperbolic paraboloid surface, and then they worked through the questions on the activity together.</p>

<h2 id="design-process">Design process:</h2>
<p>I used Mathematica to generate the surfaces using the included Mathematica code. I used Slic3r to fix errors in the STL and to split the hyperbolic paraboloid into two pieces to make it printable without supports.</p>

<h2 id="post-print-finishing">Post-print finishing:</h2>
<p>Glue the hyperbolic paraboloid pieces together using super glue. If printed in ABS, you can “weld” the two pieces together with acetone.</p>

<h2 id="files">Files</h2>
<ul>
  <li>Hyperbolic Paraboloid Classroom Activity: <a href="assets/3d-models/hyperbolic_paraboloid/Hyperbolic_Paraboloid_Activity.pdf">Hyperbolic_Paraboloid_Activity.pdf</a></li>
  <li>Hyperbolic Paraboloid Surface (split into two pieces): <a href="assets/3d-models/hyperbolic_paraboloid/Hyperbolic_Paraboloid.stl">Hyperbolic_Paraboloid.stl</a></li>
  <li>Hyperboloid in One sheet Surface: <a href="assets/3d-models/hyperbolic_paraboloid/Hyperboloid_One_Sheet.stl">Hyperboloid_One_Sheet.stl</a></li>
  <li>Elliptic Paraboloid Surface: <a href="assets/3d-models/hyperbolic_paraboloid/Elliptic_Paraboloid.stl">Elliptic_Paraboloid.stl</a></li>
  <li>Double Cone Surface: <a href="assets/3d-models/hyperbolic_paraboloid/Double_Cone.stl">Double_Cone.stl</a></li>
  <li>Mathematica Notebook: <a href="assets/3d-models/hyperbolic_paraboloid/Quadrics.nb">Quadrics.nb</a></li>
</ul>]]></content><author><name>Kevin Ahrendt</name></author><category term="3d-printing" /><category term="3d printing" /><category term="mathematics" /><category term="teaching" /><summary type="html"><![CDATA[Description: These are models for several quadric surfaces that are useful for Multivariable Calculus classes. The surfaces include raised bumps representing traces. The models allow students to make the connection between the abstract formula/2D pictures to the actual surface in 3D. I have also inclued an in-classroom activity that I used when teaching Multivariable Calculus. Each group was given a printed version of the hyperbolic paraboloid surface, and then they worked through the questions on the activity together.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://kahrendt.github.io/print-hyperbolic-paraboloid.jpg" /><media:content medium="image" url="https://kahrendt.github.io/print-hyperbolic-paraboloid.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Continuous Fractional Derivative of Quadratic Function</title><link href="https://kahrendt.github.io/continuous_quadratic_print" rel="alternate" type="text/html" title="Continuous Fractional Derivative of Quadratic Function" /><published>2019-08-05T00:00:00-04:00</published><updated>2019-08-05T00:00:00-04:00</updated><id>https://kahrendt.github.io/continuous_quadratic_print</id><content type="html" xml:base="https://kahrendt.github.io/continuous_quadratic_print"><![CDATA[<h2 id="description">Description:</h2>
<p>This is a three dimensional graph of \(x^2\), with one axis representing the Riemann-Liouville fractional derivative order ranging from 0 to 2. The \(x\)-axis ranges from 1 to 7. The zeroth order derivative, given by \(x^2\), the first derivative, given by \(2x\), and the second derivative, given by \(2\) are highlighted with a ridge. The Riemann-Liouville fractional derivative is continuous with the respect to the order of the derivative, so the transition between the zeroth, first, and second derivative to the fractional derivatives in between results in a smooth graph.</p>

<h2 id="design-process">Design process:</h2>
<p>I used Mathematica to generate the graph using the included Mathematica code. Then I used Slic3r to scale the Mathematica output to be \(80\times80\times80\) \(\text{mm}^3\) (as well as let it correct some errors in the stl file). Finally, I used Fusion 360 to design the stand.</p>

<h2 id="post-print-finishing">Post-print finishing:</h2>
<p>If desired, use a few drops of super glue to attach the surface to the stand.</p>

<h2 id="files">Files</h2>
<ul>
  <li>Continous fractional derivative of the exponential function: <a href="assets/3d-models/continuous_quadratic/Graph_Quadratic.stl">Graph_Quadratic.stl</a></li>
  <li>Stand: <a href="assets/3d-models/continuous_quadratic/Graph_Quadratic_Stand.stl">Graph_Quadratic_Stand.stl</a></li>
  <li>Mathematica Notebook: <a href="assets/3d-models/continuous_quadratic/Graph_Quadratic.nb">Graph_Quadratic.nb</a></li>
</ul>]]></content><author><name>Kevin Ahrendt</name></author><category term="3d-printing" /><category term="3d printing" /><category term="mathematics" /><summary type="html"><![CDATA[Description: This is a three dimensional graph of \(x^2\), with one axis representing the Riemann-Liouville fractional derivative order ranging from 0 to 2. The \(x\)-axis ranges from 1 to 7. The zeroth order derivative, given by \(x^2\), the first derivative, given by \(2x\), and the second derivative, given by \(2\) are highlighted with a ridge. The Riemann-Liouville fractional derivative is continuous with the respect to the order of the derivative, so the transition between the zeroth, first, and second derivative to the fractional derivatives in between results in a smooth graph.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://kahrendt.github.io/print-continuous-quadratic.jpg" /><media:content medium="image" url="https://kahrendt.github.io/print-continuous-quadratic.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Discrete Fractional Difference of Quadratic Function</title><link href="https://kahrendt.github.io/discrete_quadratic_print" rel="alternate" type="text/html" title="Discrete Fractional Difference of Quadratic Function" /><published>2019-08-05T00:00:00-04:00</published><updated>2019-08-05T00:00:00-04:00</updated><id>https://kahrendt.github.io/discrete_quadratic_print</id><content type="html" xml:base="https://kahrendt.github.io/discrete_quadratic_print"><![CDATA[<h2 id="description">Description:</h2>
<p>This is a three dimensional graph of the discrete function \((x+1)(x)\) defined on the natural numbers. This is an analogue to the quadratic function in the nabla discrete calculus; in particular, this function is known as the rising function. One axis represents the continuous order of the Riemann-Liouville fractional difference ranging from 0 to 2. The \(x\)-axis ranges in discrete steps from 1 to 7. The zeroth order difference, given by \((x+1)(x)\), the first difference, given by \(2x+1\), and the second difference, given by \(2\) are highlighted with a ridge. The Riemann-Liouville fractional difference is continuous with the respect to the order of the difference, so the transition between the zeroth, first, and second difference to the fractional differences in between results in a smooth graph in each discrete x-value.</p>

<h2 id="design-process">Design process:</h2>
<p>I used Mathematica to generate the graph using the included Mathematica code. Then I used Slic3r to scale the Mathematica output to be \(80\times80\times80\) \(\text{mm}^3\) (as well as let it correct some errors in the stl file). Finally, I used Fusion 360 to design the stand.</p>

<h2 id="post-print-finishing">Post-print finishing:</h2>
<p>If desired, use a few drops of super glue to attach the surface to the stand.</p>

<h2 id="files">Files</h2>
<ul>
  <li>Continous fractional derivative of the exponential function: <a href="assets/3d-models/discrete_quadratic/Graph_Discrete_Quadratic.stl">Graph_Discrete_Quadratic.stl</a></li>
  <li>Stand: <a href="assets/3d-models/discrete_quadratic/Graph_Discrete_Quadratic_Stand.stl">Graph_Discrete_Quadratic_Stand.stl</a></li>
  <li>Mathematica Notebook: <a href="assets/3d-models/discrete_quadratic/Graph_Discrete_Quadratic.nb">Graph_Discrete_Quadratic.nb</a></li>
</ul>]]></content><author><name>Kevin Ahrendt</name></author><category term="3d-printing" /><category term="3d printing" /><category term="mathematics" /><summary type="html"><![CDATA[Description: This is a three dimensional graph of the discrete function \((x+1)(x)\) defined on the natural numbers. This is an analogue to the quadratic function in the nabla discrete calculus; in particular, this function is known as the rising function. One axis represents the continuous order of the Riemann-Liouville fractional difference ranging from 0 to 2. The \(x\)-axis ranges in discrete steps from 1 to 7. The zeroth order difference, given by \((x+1)(x)\), the first difference, given by \(2x+1\), and the second difference, given by \(2\) are highlighted with a ridge. The Riemann-Liouville fractional difference is continuous with the respect to the order of the difference, so the transition between the zeroth, first, and second difference to the fractional differences in between results in a smooth graph in each discrete x-value.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://kahrendt.github.io/print-discrete-quadratic.jpg" /><media:content medium="image" url="https://kahrendt.github.io/print-discrete-quadratic.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Towers of Hanoi</title><link href="https://kahrendt.github.io/towers_of_hanoi_print" rel="alternate" type="text/html" title="Towers of Hanoi" /><published>2019-08-03T00:00:00-04:00</published><updated>2019-08-03T00:00:00-04:00</updated><id>https://kahrendt.github.io/towers_of_hanoi_print</id><content type="html" xml:base="https://kahrendt.github.io/towers_of_hanoi_print"><![CDATA[<h2 id="description">Description:</h2>
<p>This model represents A simple Towers of Hanoi example with four rings. <a href="https://en.wikipedia.org/wiki/Tower_of_Hanoi">Wikipedia</a> has a lot of great information on the problem.</p>

<p>This is a great example of difference equations/recursion equations in the real world! The recursion relation is given by
\(y(n+1) = 2y(n) + 1\).
We use an initial condition of \(y(1)=1\); i.e. if you have only one ring, it takes one step to move the stack to another peg. Then, our solution is given by
\(y(n) = 2^n-1\).
This means, if we use all 4 rings in this file, it takes \(2^4-1 = 15\) steps at a minimum to move the stack from one tower to the other!</p>

<h2 id="design-process">Design process:</h2>
<p>I designed this using Fusion 360.</p>

<h2 id="files">Files</h2>
<ul>
  <li>Base: <a href="assets/3d-models/towers_of_hanoi/Base.stl">Base.stl</a></li>
  <li>Four rings: <a href="assets/3d-models/towers_of_hanoi/Rings.stl">Rings.stl</a></li>
  <li>Fusion 360 Model: <a href="assets/3d-models/towers_of_hanoi/Towers_of_Hanoi.f3d">Towers_of_Hanoi.f3d</a></li>
</ul>]]></content><author><name>Kevin Ahrendt</name></author><category term="3d-printing" /><category term="3D printing" /><category term="mathematics" /><summary type="html"><![CDATA[Description: This model represents A simple Towers of Hanoi example with four rings. Wikipedia has a lot of great information on the problem.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://kahrendt.github.io/print-towers-of-hanoi.jpg" /><media:content medium="image" url="https://kahrendt.github.io/print-towers-of-hanoi.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Continuous Fractional Derivative of Exponential Function</title><link href="https://kahrendt.github.io/continuous_exponential_print" rel="alternate" type="text/html" title="Continuous Fractional Derivative of Exponential Function" /><published>2017-12-08T00:00:00-05:00</published><updated>2017-12-08T00:00:00-05:00</updated><id>https://kahrendt.github.io/continuous_exponential_print</id><content type="html" xml:base="https://kahrendt.github.io/continuous_exponential_print"><![CDATA[<h2 id="description">Description:</h2>
<p>This model is a three dimensional graph \(e^x\), with one axis representing the Riemann-Liouville fractional derivative order ranging from 0 to 1. The x-axis ranges from 0.05 to 1; the fractional derivative of \(e^x\) approaches infinity as x approaches 0, hence the axis starts at 0.05 avoid the asymptote. The Riemann-Liouville fractional derivative is continuous with the respect to the order of the derivative, so this graph is nice and smooth.</p>

<h2 id="design-process">Design process:</h2>
<p>I used Mathematica to generate the graph using the included Mathematica code. Then I used Slic3r to scale the Mathematica output to be \(80\times80\times80\) \(\text{mm}^3\) (as well as let it correct some errors in the stl file). Finally, I used Fusion 360 to design the stand.</p>

<h2 id="post-print-finishing">Post-print finishing:</h2>
<p>If desired, use a few drops of super glue to attach the surface to the stand.</p>

<h2 id="files">Files</h2>
<ul>
  <li>Continous fractional derivative of the exponential function: <a href="assets/3d-models/continuous_exponential/Graph_Exponential.stl">Graph_Exponential.stl</a></li>
  <li>Stand: <a href="assets/3d-models/continuous_exponential/Graph_Exponential_Stand.stl">Graph_Exponential_Stand.stl</a></li>
  <li>Mathematica Notebook: <a href="assets/3d-models/continuous_exponential/Graph_Exponential.nb">Graph_Exponential.nb</a></li>
</ul>]]></content><author><name>Kevin Ahrendt</name></author><category term="3d-printing" /><category term="3d printing" /><category term="mathematics" /><summary type="html"><![CDATA[Description: This model is a three dimensional graph \(e^x\), with one axis representing the Riemann-Liouville fractional derivative order ranging from 0 to 1. The x-axis ranges from 0.05 to 1; the fractional derivative of \(e^x\) approaches infinity as x approaches 0, hence the axis starts at 0.05 avoid the asymptote. The Riemann-Liouville fractional derivative is continuous with the respect to the order of the derivative, so this graph is nice and smooth.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://kahrendt.github.io/print-continous-exponential.jpg" /><media:content medium="image" url="https://kahrendt.github.io/print-continous-exponential.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">3D Printing Setup</title><link href="https://kahrendt.github.io/3d-printing-setup" rel="alternate" type="text/html" title="3D Printing Setup" /><published>2017-06-01T00:00:00-04:00</published><updated>2017-06-01T00:00:00-04:00</updated><id>https://kahrendt.github.io/3d-printing-setup</id><content type="html" xml:base="https://kahrendt.github.io/3d-printing-setup"><![CDATA[<p>I am fascinated with 3D printing and am interested in making mathematical puzzles using that process, along with models that illustrate my research interests. I primarily use Autodesk Fusion 360 to design functional models and use Mathematica to generate mathematical models. I have also have experience with OpenSCAD for model design. My current printer is a <a href="https://vorondesign.com/">Voron CoreXY V2.1</a>.​</p>

<p>My <a href="https://www.thingiverse.com/kahrendt/designs">Thingiverse page</a> contains some models I have designed. <a href="https://www.georgehart.com/rp/rp.html">George Hart</a> has created many mathematical puzzle designs capable of being 3D printed.  <a href="https://www.thingiverse.com/thing:1565383">Laura Taalman</a> has designed printable versions of some cube puzzles, and <a href="http://www.mathematische-basteleien.de/somacube.htm">Jürgen Köller</a> has mathematical information about those classes of cube of puzzles.</p>]]></content><author><name>Kevin Ahrendt</name></author><category term="3d-printing" /><category term="3d printing" /><summary type="html"><![CDATA[I am fascinated with 3D printing and am interested in making mathematical puzzles using that process, along with models that illustrate my research interests. I primarily use Autodesk Fusion 360 to design functional models and use Mathematica to generate mathematical models. I have also have experience with OpenSCAD for model design. My current printer is a Voron CoreXY V2.1.​]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://kahrendt.github.io/print-continous-exponential.jpg" /><media:content medium="image" url="https://kahrendt.github.io/print-continous-exponential.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>